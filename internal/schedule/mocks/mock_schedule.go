// Code generated by MockGen. DO NOT EDIT.
// Source: schedule.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	schedule "github.com/vncsmyrnk/tiwnotify/internal/schedule"
)

// MockJobScheduler is a mock of JobScheduler interface.
type MockJobScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockJobSchedulerMockRecorder
}

// MockJobSchedulerMockRecorder is the mock recorder for MockJobScheduler.
type MockJobSchedulerMockRecorder struct {
	mock *MockJobScheduler
}

// NewMockJobScheduler creates a new mock instance.
func NewMockJobScheduler(ctrl *gomock.Controller) *MockJobScheduler {
	mock := &MockJobScheduler{ctrl: ctrl}
	mock.recorder = &MockJobSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobScheduler) EXPECT() *MockJobSchedulerMockRecorder {
	return m.recorder
}

// AddJob mocks base method.
func (m *MockJobScheduler) AddJob(arg0 schedule.Job) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddJob", arg0)
}

// AddJob indicates an expected call of AddJob.
func (mr *MockJobSchedulerMockRecorder) AddJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddJob", reflect.TypeOf((*MockJobScheduler)(nil).AddJob), arg0)
}

// StopAllJobs mocks base method.
func (m *MockJobScheduler) StopAllJobs() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopAllJobs")
}

// StopAllJobs indicates an expected call of StopAllJobs.
func (mr *MockJobSchedulerMockRecorder) StopAllJobs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAllJobs", reflect.TypeOf((*MockJobScheduler)(nil).StopAllJobs))
}
