// Code generated by MockGen. DO NOT EDIT.
// Source: timer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockJobTimer is a mock of JobTimer interface.
type MockJobTimer struct {
	ctrl     *gomock.Controller
	recorder *MockJobTimerMockRecorder
}

// MockJobTimerMockRecorder is the mock recorder for MockJobTimer.
type MockJobTimerMockRecorder struct {
	mock *MockJobTimer
}

// NewMockJobTimer creates a new mock instance.
func NewMockJobTimer(ctrl *gomock.Controller) *MockJobTimer {
	mock := &MockJobTimer{ctrl: ctrl}
	mock.recorder = &MockJobTimerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobTimer) EXPECT() *MockJobTimerMockRecorder {
	return m.recorder
}

// C mocks base method.
func (m *MockJobTimer) C() <-chan time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "C")
	ret0, _ := ret[0].(<-chan time.Time)
	return ret0
}

// C indicates an expected call of C.
func (mr *MockJobTimerMockRecorder) C() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "C", reflect.TypeOf((*MockJobTimer)(nil).C))
}

// Stop mocks base method.
func (m *MockJobTimer) Stop() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockJobTimerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockJobTimer)(nil).Stop))
}
