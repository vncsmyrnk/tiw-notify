// Code generated by MockGen. DO NOT EDIT.
// Source: appointment.go
//
// Generated by this command:
//
//	mockgen -source=appointment.go -destination=mocks/mock_appointment.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAppointmentScheduler is a mock of AppointmentScheduler interface.
type MockAppointmentScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockAppointmentSchedulerMockRecorder
}

// MockAppointmentSchedulerMockRecorder is the mock recorder for MockAppointmentScheduler.
type MockAppointmentSchedulerMockRecorder struct {
	mock *MockAppointmentScheduler
}

// NewMockAppointmentScheduler creates a new mock instance.
func NewMockAppointmentScheduler(ctrl *gomock.Controller) *MockAppointmentScheduler {
	mock := &MockAppointmentScheduler{ctrl: ctrl}
	mock.recorder = &MockAppointmentSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppointmentScheduler) EXPECT() *MockAppointmentSchedulerMockRecorder {
	return m.recorder
}

// ScheduleFromFile mocks base method.
func (m *MockAppointmentScheduler) ScheduleFromFile(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleFromFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleFromFile indicates an expected call of ScheduleFromFile.
func (mr *MockAppointmentSchedulerMockRecorder) ScheduleFromFile(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleFromFile", reflect.TypeOf((*MockAppointmentScheduler)(nil).ScheduleFromFile), arg0)
}
